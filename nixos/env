#!/bin/sh

export SM_NIX_ROOT=/home/ierton/proj/nix
export NIX_PATH="nixpkgs=$SM_NIX_ROOT/nixpkgs:nixos=$SM_NIX_ROOT/nixos:nixos-config=$SM_NIX_ROOT/nixos-config:services=/etc/nixos/services"

cdt() { cd $HOME/tmp; }
cdn() { cd $SM_NIX_ROOT; }
cdp() { cd $SM_NIX_ROOT/nixpkgs; }
cdo() { cd $SM_NIX_ROOT/nixos; }

vimc() { (cdn && vim nixos-config ; ); }
vimp() { (cdp && vim pkgs/top-level/all-packages.nix; ); }
vimo() { (cdo && vim .; ); }

asroot() {
  case `whoami` in
    root)
      echo "" ;;
    *)
      echo "sudo -H " ;;
  esac
}

tofull() {
  case $1 in
    /*) echo "$1" ;;
    *) echo "`pwd`/$1" ;;
  esac
}

tfetch() {
  ( cdp && git fetch origin ; )
  ( cdo && git fetch origin ; )
}

tdryrun() {
  nixos-rebuild -I $SM_NIX_ROOT "$@" dry-run
}

tswitch() {
  `asroot` nixos-rebuild -I $SM_NIX_ROOT switch
}

trev() {
  REVFILE=/nix/var/nix/profiles/per-user/root/channels/nixos/nixos/svn-revision
  REV_INFO=`cut -d'_' -f2 < $REVFILE`
  case $1 in
    nixpkgs) echo $REV_INFO | cut -d'-' -f2 ;;
    nixos) echo $REV_INFO | cut -d'-' -f1 ;;
    *) return 1 ;;
  esac
}

tupdate() {
  tfetch &&
  (`asroot` nix-channel --update nixos) &&
  (cd $SM_NIX_ROOT/nixpkgs && git rebase `trev nixpkgs` ; ) &&
  (cd $SM_NIX_ROOT/nixos && git rebase `trev nixos` ; )
}

# Fetches a source by name (as written in all-packages.nix)
pfetch() {
  nix-build --no-out-link $SM_NIX_ROOT/nixpkgs/pkgs/top-level/all-packages.nix -A $1.src --show-trace 
  #nix-build --no-out-link "<nixpkgs>" -A $1.src --show-trace 
}

# Unpacks a source, renames output to a friendly name
unpack_tarball() {
	local curSrc="$1"
	local friendlyName="$2"
	test -f "$curSrc" || { echo "no such file: $curSrc" >&2; return 1 ; }
	case "$curSrc" in
		*.tar) tar xvf $curSrc ;;
		*.tar.gz|*.tgz|*.tar.Z) gzip -d < $curSrc | tar xvf - ;;
		*.tar.bz2|*.tbz2) bzip2 -d < $curSrc | tar xvf - ;;
		*.zip) unzip $curSrc ;;
		*) if test -d "$curSrc" ; then
				if test -n "$friendlyName" ; then
					cp -prvd "$curSrc" "./$friendlyName"
				else
					cp -prvd "$curSrc" .
				fi
			else
				echo "source archive $curSrc has unknown type" >&2
				return 1
			fi ;;
	esac
}

punpack() {
  unpack_tarball `pfetch $1` $1
}

penv() {
   nix-build $SM_NIX_ROOT/nixpkgs --run-env -A $1
}

alias nixenv="nix-env -f '<nixpkgs>'"

export PS1="\n[\u@\h] \w \$ "

###end-of-rc###

#export REAL_SHELL=$SHELL
rc=`mktemp`
cp $HOME/.bashrc $rc
cat $0 | sed -n '/#!\/bin\/sh/,/###end-of-rc###/p' >> $rc
printf "export SHELL=%s\n" $SHELL >> $rc
#cd $SM_NIX_ROOT

case $1 in
  screen) screen -s $0 ;;
  *) bash --rcfile $rc "$@" ;;
esac
rm $rc

