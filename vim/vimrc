runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

syntax enable
filetype plugin on
filetype indent on
colorscheme default

let mapleader = "`"
let maplocalleader = "`"

set guioptions-=m
set guioptions-=T
set scrolloff=10
set tabstop=4
set nobackup
set shiftwidth=4
set noshowmatch
set showcmd
set autowrite
set foldmethod=marker
set foldcolumn=0
set backspace=indent,eol,start
set incsearch
"set ignorecase
set formatoptions+=ro
set cinoptions+=g0,(4
set nohlsearch
set guifont=Terminus\ 13
set mouse=nirv
set laststatus=2
set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set tags=tags;
set encoding=utf-8
set fileencodings=utf8,cp1251
set t_Co=256
set modeline
set textwidth=80
set timeoutlen=500
set directory=~/tmp/vim.swp/,.,~/tmp,/var/tmp,/tmp
set hidden

au BufEnter * syntax sync minlines=50

au FileType *nix,nixos-config set expandtab
au FileType *nix,nixos-config set shiftwidth=2
au FileType *nix,nixos-config set tabstop=2

au FileType sh set expandtab
au FileType sh set smartindent
au FileType sh set shiftwidth=2
au FileType sh set tabstop=2

au FileType *haskell set expandtab
au FileType *haskell set smartindent
au FileType *haskell set shiftwidth=2
au FileType *haskell set tabstop=2
au FileType cabal set expandtab
au FileType python set expandtab

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
au BufReadPost *
	\ if line("'\"") > 0 && line("'\"") <= line("$") |
	\   exe "normal g`\"" |
	\ endif

" NERDtree auto-close
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Remove trailing whitespaces before saving
"autocmd BufWritePre * :%s/\s\+$//e

" General bindings
inoremap <Leader><Leader> <Leader>
inoremap <Esc><Esc> <Esc>

" Save
nnoremap <F2> <ESC>:w!<CR>
inoremap <F2> <ESC>:w!<CR>

" Reformat
nnoremap <F3> gqap
inoremap <F3> <C-o>gqap
vnoremap <F3> gq

" Fast command line
nnoremap ! :!

" Help on word
map <F1> :exec ":help " . expand('<cword>')<CR>

" Screen
nnoremap s :!screen<CR>

" Display lines scrolling
nnoremap j gj
nnoremap k gk
nnoremap Y y$

" Quick quit
nnoremap q <C-w>q

" Visual mode tweaks
vnoremap : y:<Space><C-r>"<C-b>
vnoremap ! y:!<C-r>"<C-b><Right>

" Easy paste
nnoremap <Leader>i :set paste<CR>i

" Open quickfix window
nnoremap <Leader>f :cope<CR>

" Tab key cycles through windows
noremap <Tab> <C-w>w

" Tabs
map gr gT
map tn :tabnew<CR>
map th :tabnew $HOME<CR>

" Clipboard helpers
if has("x11")
	vnoremap y "+y
	vnoremap d "+d
	vnoremap c "+c
	vnoremap p "+p
	nnoremap Y "+y$
	nnoremap D "+D
	nnoremap yy "+yy
	nnoremap yw "+yw
	nnoremap dd "+dd
	nnoremap p "+p
	nnoremap P "+P
endif

" Quicfix bindings
function! QFmap(a,b)
	exe "au BufWinEnter quickfix map <buffer> " . a:a . " " . a:b
endfunction
command! -nargs=+ QFmap :call QFmap(<f-args>)

QFmap o <cr>
QFmap J :cnext<cr>:copen<cr>
QFmap K :cprevious<cr>:copen<cr>
QFmap <C-o> :cold<cr>
QFmap <C-i> :cnew<cr>
QFmap <Leader>f <C-w>q
QFmap q :q<cr>

" Readline-style bindings
" FIXME: Works ok for console version of vim only. They actually maps
" <Esc><key>. That causes problems in normal mode.
imap <Esc>f <C-o>e<C-o>a
cmap <Esc>f <S-Right>
imap <Esc>b <C-o>b
cmap <Esc>b <S-Left>
imap <Esc>d <C-o>ved

" Wrap encodings on F8
let g:enc_index = 0
function! ChangeFileencoding()
  let encodings = ['cp1251', 'cp866', 'utf-8']
  execute 'e ++enc='.encodings[g:enc_index].' %:p'
  echo encodings[g:enc_index]
  if g:enc_index >= len(encodings)-1
	  let g:enc_index = 0
  else
	  let g:enc_index = g:enc_index + 1
  endif
endf
nmap <F8> :call ChangeFileencoding()<CR>

" Cyrvim
let g:cyrvim_map_esc = 1
let g:cyrvim_map_cmd = 1
let g:cyrvim_map_cmd_esc = 1

" TagList
"let g:Tlist_Use_Horiz_Window = 1
"let g:Tlist_Show_One_File = 1
"let g:Tlist_Max_Tag_Length = 30
"let g:Tlist_GainFocus_On_ToggleOpen = 1
"nnoremap <Leader>l <ESC>:TlistToggle<CR>

" TagBar
"let g:tagbar_autofocus = 1
"let g:tagbar_sort = 1
"nnoremap <Leader>l <ESC>:TagbarToggle<CR>
"autocmd VimEnter * nested :call tagbar#autoopen(1)
"autocmd BufEnter * nested :call tagbar#autoopen(0)
"autocmd FileType c,cpp,haskell nested :TagbarOpen

" NERDTree settings
let g:NERDChristmasTree=1
let g:NERDTreeChDirMode=2
let g:NERDTreeMinimalUI=1
let g:NERDTreeWinSize=35
let g:NERDTreeIgnore=['\.o$', '\.ko$', '^cscope', '\.hi']
let g:NERDTreeCasadeOpenSingleChildDir=1
noremap <F4> <ESC>:NERDTreeFind<CR>
command -nargs=0 NF :NERDTreeFind

function! NERDTreeOpenTerm(node)
	let oldcwd = getcwd()
	call a:node.path.getDir().changeToDir()
	exec '!screen'
	exec "cd " . oldcwd
endfunction

" BufferExplorer
nnoremap <Leader>e <Esc>:BufExplorer<CR>
noremap <Space> <Esc>:BufExplorer<CR>
inoremap <Leader>e <Esc>:BufExplorer<CR>

" EasyGrep
let g:EasyGrepRecursive = 1
let g:EasyGrepMode = 2

" Local vimrc
let g:local_vimrc = '.vimrc_local.vim'

" GetLatestVimScripts
let g:GetLatestVimScripts_allowautoinstall = 1

" Comments
vmap <C-C> \\
map <C-C> \\\j
map <C-X> \\\j

" SuperTab
let g:SuperTabDefaultCompletionType = "context"

" Surround
xmap s S

