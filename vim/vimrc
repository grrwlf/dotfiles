syntax enable
filetype plugin on
filetype indent on
colorscheme default

let mapleader = "`"
let maplocalleader = "`"

set guioptions-=m
set guioptions-=T
set scrolloff=100
set tabstop=4
set nobackup
set shiftwidth=4
set noshowmatch
set showcmd
set autowrite
set foldmethod=marker
set foldcolumn=0
set backspace=indent,eol,start
set incsearch
set ignorecase
set formatoptions+=ro
set cinoptions+=g0,(4
set hlsearch
set guifont=Terminus\ 13
set mouse=nirv
set laststatus=2
set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set tags=tags;
set encoding=utf-8
set fileencodings=utf8,cp1251
set t_Co=256
set modeline
set textwidth=80
set timeoutlen=300

au Bufenter * syntax sync minlines=50

au FileType *haskell set expandtab
au FileType *haskell set smartindent
au FileType cabal set expandtab

" Enable auto-paragraph-reformat, when editing emails
au FileType mail set formatoptions+=an

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
au BufReadPost *
	\ if line("'\"") > 0 && line("'\"") <= line("$") |
	\   exe "normal g`\"" |
	\ endif

highlight ExtraWhitespace ctermbg=red guibg=red
au Syntax * syn match ExtraWhitespace /\s\+$/

" General bindings
inoremap <Leader><Leader> <Leader>
inoremap <Esc><Esc> <Esc>

" Save
nnoremap <F2> <ESC>:w<CR>
inoremap <F2> <ESC>:w<CR>

" Reformat
nnoremap <F3> gqap
inoremap <F3> <C-o>gqap
vnoremap <F3> gq

" Fast command line
nnoremap ! :!

" Display lines scrolling
nnoremap j gj
nnoremap k gk
nnoremap Y y$

" Quick quit
nnoremap <ESC><ESC><ESC><ESC> :qa<CR>
nnoremap q <ESC>:q<CR>

" Visual mode tweaks
vnoremap : y:<C-r>"<C-b>
vnoremap ! y:!<C-r>"<C-b><Right>

" Easy paste
nnoremap <Leader>i :set paste<CR>i

" Open quickfix window
nnoremap <Leader>f :cope<CR>

" make
nnoremap <F5> :make<CR>
inoremap <F5> <Esc>:make<CR>

" Tabs
map gr gT

" Quicfix bindings {{{
function! QFmap(a,b)
	exe "au BufWinEnter quickfix map <buffer> " . a:a . " " . a:b
endfunction
command! -nargs=+ QFmap :call QFmap(<f-args>)

QFmap o <cr>
QFmap J :cnext<cr>:copen<cr>
QFmap K :cprevious<cr>:copen<cr>
QFmap <C-o> :cold<cr>
QFmap <C-i> :cnew<cr>
QFmap <Leader>f <C-w>q
QFmap q :q<cr>
" }}}

" Clipboard bindings {{{
if has("x11")
	vnoremap y "+y
	vnoremap d "+d
	vnoremap c "+c
	vnoremap p "+p
	nnoremap Y "+y$
	nnoremap yy "+yy
	nnoremap yw "+yw
	nnoremap dd "+dd
	nnoremap p "+p
	nnoremap P "+P
endif
" }}}

" Russian layout bindings {{{
function! KBmap(a,b)
	exe "map " . a:a . " " . a:b
	exe "imap <Esc>" . a:a . " <Esc>" . a:b
	exe "cmap " . a:a . " " . a:b
	exe "cmap <Esc>" . a:a . " <Esc>" . a:b
endfunction
command! -nargs=+ KBmap :call KBmap(<f-args>)

KBmap ё `
KBmap й q
KBmap ц w
KBmap у e
KBmap к r
KBmap е t
KBmap н y
map нн yy
KBmap г u
KBmap ш i
KBmap щ o
KBmap з p
KBmap х [
KBmap ъ ]
KBmap ф a
KBmap ы s
KBmap в d
map вв dd
KBmap а f
KBmap п g
map пй gq
map пйй gqq
KBmap р h
KBmap о j
KBmap л k
KBmap д l
KBmap ж ;
KBmap э '
KBmap я z
map ящ zo
map яс zc
KBmap ч x
KBmap с c
KBmap м v
KBmap и b
KBmap т n
KBmap ь m
KBmap б ,
KBmap ю .
KBmap Ё ~
KBmap Й Q
KBmap Ц W
KBmap У E
KBmap К R
KBmap Е T
KBmap Н Y
KBmap Г U
KBmap Ш I
KBmap Щ O
KBmap З P
KBmap Х {
KBmap Ъ }
KBmap Ф A
KBmap Ы S
KBmap В D
KBmap А F
KBmap П G
KBmap Р H
KBmap О J
KBmap Л K
KBmap Д L
KBmap Ж :
KBmap Э "
KBmap Я Z
KBmap Ч X
KBmap С C
KBmap М V
KBmap И B
KBmap Т N
KBmap Ь M
KBmap Б <
KBmap Ю >
"}}}

" Readline-style bindings {{{
" FIXME: Works ok for console version of vim only. They actually maps
" <Esc><key>. That causes problems in normal mode.
" Map <A-f>
imap <Esc>f <C-o>e<C-o>a
cmap <Esc>f <S-Right>

" Map <A-b>
imap <Esc>b <C-o>b
cmap <Esc>b <S-Left>

" Map <A-d>
imap <Esc>d <C-o>ved
"}}}

" Find file in current directory and edit it. {{{
function! Find(...)
  let path="."
  if a:0==2
    let path=a:2
  endif
  let l:list=system("find ".path. " -name '".a:1."' | grep -v .svn ")
  let l:num=strlen(substitute(l:list, "[^\n]", "", "g"))
  if l:num < 1
    echo "'".a:1."' not found"
    return
  endif
  if l:num == 1
    exe "open " . substitute(l:list, "\n", "", "g")
  else
    let tmpfile = tempname()
    exe "redir! > " . tmpfile
    silent echon l:list
    redir END
    let old_efm = &efm
    set efm=%f

    if exists(":cgetfile")
        execute "silent! cgetfile " . tmpfile
    else
        execute "silent! cfile " . tmpfile
    endif

    let &efm = old_efm

    " Open the quickfix window below the current window
    botright copen

    call delete(tmpfile)
  endif
endfunction
command! -nargs=* Find :call Find(<f-args>)
" }}}

" TagList
let g:Tlist_Use_Horiz_Window = 1
let g:Tlist_Show_One_File = 1
let g:Tlist_Max_Tag_Length = 30
let g:Tlist_GainFocus_On_ToggleOpen = 1
nnoremap <Leader>l <ESC>:TlistToggle<CR>

" NERDTree settings
let g:NERDTreeWinSize=25
let g:NERDTreeIgnore=['\.o$', '\.ko$', '^cscope', '\.hi']
nnoremap <Leader>n <ESC>:NERDTreeToggle<CR>
inoremap <Leader>n <ESC>:NERDTreeToggle<CR>
command -nargs=0 NF :NERDTreeFind

" BufferExplorer
nnoremap <Leader>e <Esc>:BufExplorer<CR>
inoremap <Leader>e <Esc>:BufExplorer<CR>

" EasyGrep
let g:EasyGrepRecursive = 1
let g:EasyGrepMode = 2

" Haskell
let g:haddock_browser = "firefox"
let g:haddock_browser_callformat = '%s %s'
let g:haskell_indent_case = 0
let g:haskell_indent_if = 0

" Local vimrc
let g:local_vimrc = '.vimrc_local.vim'

" GetLatestVimScripts
let g:GetLatestVimScripts_allowautoinstall = 1

" Comments
map <leader>c <C-C>
map <leader>x <C-X>

" Opener
let g:opener_cmd = "xdg-open"

